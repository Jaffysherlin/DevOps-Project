name: CI/CD â€” Build & Deploy to AKS

# Trigger workflow on push to main branch
on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}             # e.g. neighbor-app
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }} # e.g. neighboracr2025.azurecr.io
  AKS_RESOURCE_GROUP: ${{ secrets.AKS_RESOURCE_GROUP }} # e.g. neighbor-rg
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}     # e.g. neighbor-aks

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}  # Service principal JSON

      # Step 3: Log in to Azure Container Registry
      - name: Log in to ACR
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      # Step 4: Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: ./                   # Path to your app folder
          file: ./Dockerfile            # Path to Dockerfile
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.IMAGE_NAME }}:latest

      # Step 5: Get AKS credentials
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }} \
            --overwrite-existing

      # Step 6: Apply Kubernetes manifests
      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/           # Path to your deployment/service YAML files
          kubectl rollout status deployment/${{ env.IMAGE_NAME }} -n default
