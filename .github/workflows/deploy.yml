name: CI/CD — Build → ACR → AKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  ACR: ${{ secrets.ACR_LOGIN_SERVER }}   # e.g. neighboracr2025.azurecr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Qemu (for cross-build, optional)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Azure (using SP)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CLIENT_ID }}    # optional fallback; using az login is fine
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build and push image to ACR
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile                # adjust path if Dockerfile elsewhere
          push: true
          tags: ${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}

      - name: Set image tag output
        run: echo "IMAGE_TAG=${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        id: image_tag

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout manifests
        uses: actions/checkout@v4
        with:
          path: manifests

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS credentials
        uses: azure/aks-set-context@v2
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Replace image in k8s deployment and apply
        run: |
          IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/${{ secrets.IMAGE_NAME }}:${{ github.sha }}
          # Update the deployment manifest (works for simple cases)
          yq e '.spec.template.spec.containers[0].image = strenv(IMAGE)' -i ./manifests/deployment.yaml
          kubectl apply -f ./manifests/deployment.yaml
          kubectl apply -f ./manifests/service.yaml

      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/neighbor-app --timeout=120s

      - name: Verify service and pod
        run: |
          kubectl get pods -o wide
          kubectl get svc neighbor-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true
